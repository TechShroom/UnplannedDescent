println "Configuring $name's GitHub manager..."

buildscript {
    repositories {
        mavenCentral()
    }
    
    
    dependencies {
        classpath 'com.jcabi:jcabi-github:0.8.1'
    }
}

import com.jcabi.github.*
import com.jcabi.github.wire.CarefulWire;
import com.jcabi.http.wire.*

ext.createGithub = { oauth ->
    def rt = null
    if (oauth == "" || oauth == null) {
        rt = new RtGithub()
    } else {
        rt = new RtGithub(oauth)
    }
    return new RtGithub(rt.entry().through(RetryWire.class).through(CarefulWire.class, 50))
}

ext.getLastRelSmart = { repo ->
    def lastll = repo?.releases()?.iterate()?.iterator()?.toList()
    def last = null
    if (lastll.size() != 0) {
        last = lastll.last()
    }
    return last == null ? null : new Release.Smart(last)
}

import java.util.regex.Matcher
import java.util.regex.Pattern

// note: the following requires a tag version formatted as follows:
// "v$major.$minor.$patch"
// ('v' + major + '.' + minor + '.' + patch)
// and a project version formatted as follows:
// "$major.$minor.$patch"
// (major + '.' + minor + '.' + patch)

ext.versionNext = { relsm ->
    def pver = project.version
    def mat = pver =~ /(\d)\.(\d)\.(\d).+/
    if (!mat) {
        throw new IllegalArgumentException("project version ($pver) in wrong format")
    }
    
    println "Comparing $pver..."
    
    def pmajor = mat.group(1)
    def pminor = mat.group(2)
    def ppatch = mat.group(3)
    
    def lver = relsm?.name()
    mat = lver =~ /v\.(\d)\.(\d)\.(\d)/
    if (mat) {
        def major = mat.group(1)
        def minor = mat.group(2)
        def patch = mat.group(3)
        if (major > pmajor - 1) {
            throw new RuntimeException("Too large of a jump: $major -> $pmajor")
        }
        if (minor > pminor - 1) {
            throw new RuntimeException("Too large of a jump: $minor -> $pminor")
        }
        if (patch > ppatch - 1) {
            throw new RuntimeException("Too large of a jump: $patch -> $ppatch")
        }
        println "Going from $lver -> $pver"
    } else {
        // assume version is right
        println "Assuming version v$pver is correct!"
    }
    return pver
}

task release(dependsOn: 'doBuild') {
    def projCoord = new Coordinates.Simple("TechShroom", "UnplannedDescent")
    def git = project.createGithub(project.oauth)
    def proj = git.repos().get(projCoord)
    def rs = project.getLastRelSmart(proj)
    def ver = project.versionNext()
    
    if (ver == rs?.name()) {
        println "Version unchanged."
        return
    }
}

println "Complete."
