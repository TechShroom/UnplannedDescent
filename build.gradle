version = '0.0.1'
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '3.0.0'
    }
}
ext.lwjglVersion = '3.1.2-SNAPSHOT'

def addLWJGL(project, ext, natives) {
    // "lwjgl" or "lwjgl-ext"
    def lwjgl = "lwjgl" + (ext ? "-" + ext : "")
    def ver = project.lwjglVersion
    project.dependencies {
        compile group: 'org.lwjgl', name: lwjgl, version: ver
        if (natives) {
            compile group: 'org.lwjgl', name: lwjgl, version: ver, classifier: 'natives-macos'
            compile group: 'org.lwjgl', name: lwjgl, version: ver, classifier: 'natives-linux'
            compile group: 'org.lwjgl', name: lwjgl, version: ver, classifier: 'natives-windows'
        }
    }
}
subprojects {
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'aversion-util'
    apply plugin: 'aversion-maven'
    apply plugin: 'aversion-apt'

    util {
        javaVersion = '1.8'
    }

    mavencfg {
        coords 'TechShroom', 'UnplannedDescent'
        description 'UnplannedDescent'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    configurations.all {
       resolutionStrategy {
         // fail eagerly on version conflict (includes transitive dependencies)
         // e.g. multiple different versions of the same dependency (group and name are equal)
         failOnVersionConflict()

         // force certain versions of dependencies (including transitive)
        force 'com.google.guava:guava:21.0'

         cacheDynamicVersionsFor 10, 'minutes'
         // don't cache changing modules at all
         cacheChangingModulesFor 0, 'seconds'
       }
    }
    dependencies {
        compile group: 'com.techshroom', name: 'StepBuilder', version: '1.0.0'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

        compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.3'

        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

        compile group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'

        compile group: 'com.google.inject', name: 'guice', version: '4.1.0'

        compile group: 'com.squareup', name: 'javapoet', version: '1.8.0'

        compile group: 'com.squareup.okio', name: 'okio', version: '1.3.0'

        addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '21.0'
        // FIX: remove compile warnings from Guava, see https://github.com/google/guava/issues/2721
        compileOnly 'com.google.errorprone:error_prone_annotations:2.0.15'
        addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'
        addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.4'
        addAPTReq name: 'aopalliance'
        addAPTReq name: 'asm'
        addAPTReq name: 'auto-value'
        addAPTReq name: 'auto-common'
        addAPTReq name: 'cglib'
        addAPTReq name: 'commons-collections'
        addAPTReq name: 'commons-lang'
        addAPTReq name: 'dagger'
        addAPTReq name: 'javawriter'
        addAPTReq name: 'javax.inject'
        addAPTReq name: 'velocity'

        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

	javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    configure([compileJava, compileTestJava]) {
        options.compilerArgs += ['-Xlint:all', '-Xlint:-processing', '-Xlint:-path']
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.incremental = true
        options.fork = true
    }
}

project('UDImpl') {
    dependencies {
        addLWJGL(project, '', true);
        addLWJGL(project, 'opengl', true);
        addLWJGL(project, 'openal', true);
        addLWJGL(project, 'glfw', true);
        addLWJGL(project, 'nanovg', true);
        addLWJGL(project, 'stb', true);
        addLWJGL(project, 'jemalloc', true);
        addLWJGL(project, 'nfd', true);

        compile project(':UDAPI')
    }
}
